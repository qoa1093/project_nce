day5

[while문 문법]

while(조건식){
	실행문;
}




(풀어쓰면:
초기화;
while(조건식){
	실행문;
	증감식;
}
>>for문에서 실행문 증감식 역할부분을 실행문으로 묶음)


-while문에서 조건식은 생략 불가능(반복문에서는 가능하지만.. 무한루프 만들때는 항상 참인것 true등 조건식에 씀)
-모든 반복문은 for문으로 표현 가능하다
-모든 반복문은 while문으로 표현 가능하다
-for문 while문 둘중에 하나만 잘 써도 된다
-반복하는 숫자가 일정하게 증가하거나 반복횟수가 정해져있는 경우 for문을 사용
-주로 반복횟수가 정해져있지않은 경우 while문을 사용(초기화, 증감식부분 비어있고 조건식만 쓰는경우:q찾기등)


[do while문 문법]

do{
	실행문;
}while(조건식);


-do while문은 무조건 1번은 됨
-do while문은 최소 1번은 실행되어야 할 때 사용(영문자 입력 예제)



Label1: for(;;){
			for(;;){
				if(){
					//라벨 쓰면 b로 빠져나감
					break Label1;
				}
			}
			//a : 가장 가까운 반복문으로 빠져나감
}
//b

라벨붙이면 내가원하는 특정 위치로 브레이크 건너뛸 수 있음


<반복문>
-반복문 종류(for, while, do while)
-언제 사용? 규칙적인 작업을 반복할 때
-반복횟수, 규칙성, 반복문 종료 후 작업으로 나눠서 연습

-참조타입
-정수형, 실수형, 논리형은 기본타입
-문자열은 참조타입(으악 그래서 대문자)(다른 누군가(값)의 주소를 참조하여 만들어짐)
-기본타입은 값을 저장
-참조 타입은 주소를 저장(같다 아니다는 주소가 같다는걸 보는것, @@@"",''다른주소?)
-기본타입이 아닌 모든 타입은 참조타입 (164p)
심화(166~167p)

168p
if(op=="+")
-참조변수에서 ==와 !=는 주소를 비교하기 때문에 실제 값이 같더라도 주소가 다르면 다르다고 판단
-참조변수는 일반적으로 초기값을 null로 지정
null : 객체를 참조하지 않는다는 뜻

171p
리터럴 : 1, 'a', 1.23(: 실제값)(코드에서 사용하는 값)
int a = 1; (1은 상수이면서 리터럴) 두 문자열은 서로 비교하면(==) 안됨. 참조변수라서...
##참조변수 = 주소


177p. 배열

- 배열을 생성할 수 있다
- 반복문을 이용하여 배열을 관리할 수 있다

- 배열 : (같은 의미) + 같은 타입의 변수들을 모아넣은 것

//아래는 성적이라는 의미로 묶을 수 있기 때문에 배열로 만들어서 사용
int stdScore1, stdScore2, ...stdScore30 : 배열이 유리

//아래는 타입은 같지만 의미를 묶을 수 없기 때문에 배열로 안만드는것이 낫다
int appleCount, stdScore, age : 다양한 변수가 섞인 경우 타입(정수,실수등)이 같더라도 배열 불리


[배열 선언 방법](초기화할때)
타입 배열명[];
타입[]배열명;
타입 배열명[] = new 타입[크기];          //###추천 : 파이썬에서 range같은건가??
타입 배열명[] = {값, 값2 값3, ...};		//리스트...?
타입 배열명[]= new 타입[]{값1, 값2, 값2...};



int array1[] = null;			//배열은 기본타입을 이용해서 만든 참조타입이라서 첨에 주소설정안되어있음 
int []array2 = null;


- 객체 : new 연산자를 통해 만들어진 저장공간
- 변수 : 일반 타입으로 만들어진 저장공간
- 배열의 시작 번지는 0번지부터 시작, 마지막번지는 크기-1
- 배열의 값 가져오기
  배열명[번지]
  배열의 첫번째 값을 가져오고 싶다 : arr[0];

184p하단 표 : 배열의 초기값

185p. 배열의 길이
배열의 길이는 배열명.lengh로 알수 있다.

arr.length : int arr[];의 길이(개수)


157p. 향상된 for문
for(타입변수:배열명){
	실행문;
}


-----------------------------------------------------------------
##중복값 확인하기

i:(i=0;i<5-1;i+=1)	// @@@이거 놓쳣다
0 1 2 3 4
01 02 03 04		i = 0 //0비교 다하고 빠져나감(공통으로 들어간 숫자 :0)
12 13 14		i = 1 //1비교 다하고 빠져나감
23 24			i = 2 //2비교 다하고 빠져나감
34				i = 3 //3비교 다하고 빠져나감 (확인갯수 줄기때문에 더 빠름)

						k값 변화
k:(k= i+1;k<=4;k+=1) //갯수 강조하려면 <5로 써도되고 이건 length와 동일
			"			1 2 3 4 i가 0일때 1부터 4까지
			"			2 3 4   i가 1일때 i+1부터 4까지
			"			3 4
			"			4




bool 사용이유:
*기본 : 중복 없음(아직 비교안해서 같은지를 확인하기 때문에 없음이 기준 흰까마귀넹...)

*중복시! : 중복 있음

*모두 비교 후 중복0 -> 중복있음 출력 : 중복x -> 중복없음 출력


출력값
기본 : 같은값 없음;(false) (출력을 위해 참조로 저장한 값?)

arr[i]번째 학생과 arr[k]번째 학생과 비교해서 같은값 있으면 있음(true)로 표현



-----------------------------------------------------------------

비대면2 2 +2 
1: 출석부 순서대로
자리 : 월요일 정해진 순서대로 금까지
금요일기준으로 비대면 신청받음 연속2주까지 가능 
5명이하일경우 나부터 돌아감...
다음주 월 : 모듈교재13권...
etc패키지 : 기타 수업에 안나갔던 코드들 들어있는 패키지 필요시 다운

과제(자율):
[숫자 야구 게임]
- 1~9 사이의 중복되지 않은 3개의 정수를 랜덤으로 생성
- b : 숫자는 있지만 위치는 다른 경우
- s : 숫자도 있고 위치가 같은 경우
- o : 일치하는 숫자가 하나도 없는 경우

예시 : 3 9 5
입력하세요(1~9): 1 2 3
1b
입력하세요(1~9): 4 5 6
1b
입력하세요(1~9): 3 4 5
2s
입력하세요(1~9): 3 5 9
1s2b
입력하세요(1~9): 6 7 8
o
입력하세요(1~9): 3 9 5
3s
정답입니다.


주말숙제?
     *
    ***
   *****
  *******
 *********
 
 ********* 9 7 5 3 1 순
  *******
   *****
    ***
     *
     
   트리 만들어보기 = 깃헙 홈웤에 답지